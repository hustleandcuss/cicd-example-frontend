name: Frontend Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Git checkout
      uses: actions/checkout@v4
    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.2
      with:
        node-version: '20.x'
    - name: npm install
      run: |
        npm install
    - name: npm run lint
      id: lint
      run: |
        npm run lint
  test:
    name: Test
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Git checkout
      uses: actions/checkout@v4
    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.2
      with:
        node-version: '20.x'
    - name: npm install
      run: |
        npm install
    - name: npm run test
      id: test
      run: |
        npm run test
  get-version:
    name: Get Project Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    environment: production
    steps:
    - name: Git checkout
      uses: actions/checkout@v4
    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.2
      with:
        node-version: '20.x'
    - name: Get project version
      id: get-version
      run: |
        response="$(npm pkg get version | xargs)"
        
        if [[ $? -eq 0 ]]; then
          echo "version=$response" >> "$GITHUB_OUTPUT"
          echo "$response"
        else
          echo "Error: $response"
          exit 1
        fi
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: production
    needs:
      - test
      - lint
      - get-version
    steps:
    - name: Build Docker Image and Push to GHCR, Docker Hub, or AWS ECR
      env:
        VERSION: ${{ needs.get-version.outputs.version }}
      uses: GlueOps/github-actions-build-push-containers@v0.3.7
      with:
        registry: ${{ vars.CONTAINER_REGISTRY }}
        image_name: cicd-example-frontend-service
        # Comma-separate list of tags for built image.  Defaults to GlueOps tags
        tags: $VERSION
        # AWS Access Key ID - to be used in conjunction with `aws_secret_access_key`
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS Secret Access Key - to be used in conjunction with `aws_access_key_id`
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        # AWS IAM Role to assume, when using the GitHub OIDC provider in conjunction with a configured AWS IAM Identity Provider endpoint and instead of access key / secret key pair
#        aws_role_to_assume: ${{ secrets.ROLE }}
        # AWS Default Region
        aws_default_region: ${{ vars.AWS_REGION }}
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs:
      - build
      - lint
      - test
      - get-version
    steps:
      - name: Deploy image to AWS App Runner
        env:
          VERSION: ${{ needs.get-version.outputs.version }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          APP_RUNNER_SERVICE_ARN: ${{ vars.AWS_APP_RUNNER_SERVICE_ARN }}
          IMAGE_NAME: cicd-example-frontend-service
        run: |
          echo "Starting deploy"
          
          response="$(aws apprunner update-service \
            --region eu-west-1 \
            --service-arn $APP_RUNNER_SERVICE_ARN \
            --source-configuration '{"ImageRepository":{"ImageIdentifier":"'${CONTAINER_REGISTRY}'/'${IMAGE_NAME}':'${VERSION}'","ImageRepositoryType":"ECR"}}')"
          
          if [[ $? -eq 0 ]]; then
            echo "Successfully deployed service"
          else
            echo "Error: $response"
            exit 1
          fi